server.forward-headers-strategy: framework

api:

  common:
    version: 1.0.0
    title: Task API
    description: Task API that will be used as a endpoint to a backend receive tasks objects
    termsOfService: MY TERMS OF SERVICE
    license: MY LICENSE
    licenseUrl: MY LICENSE URL

    externalDocDesc: MY WIKI PAGE
    externalDocUrl: MY WIKI URL
    contact:
      name: NAME OF CONTACT
      url: URL TO CONTACT
      email: contact@mail.com

  responseCodes:
    ok.description: OK
    badRequest.description: Bad Request, invalid format of the request. See response message for more information
    notFound.description: Not found, the specified id does not exist
    unprocessableEntity.description: Unprocessable entity, input parameters caused the processing to fail. See response message for more information

  agenda-producer:
    get-composite-task:
      description: Returns a composite view of the specified task id
      notes: |
        # Normal response
        If the requested task id is found the method will return information regarding:
        1. task information
        1. Service Addresses\n(technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no task information is found, a **404 - Not Found** error will be returned

    create-composite-task:
      description: Creates a composite task
      notes: |
        # Normal response
        The composite task information posted to the API will be split up and stored as separate task-info, recommendation and review entities.

        # Expected error responses
        1. If a task with the same taskId as specified in the posted information already exists,
           an **422 - Unprocessable Entity** error with a "duplicate key" error message will be returned

    delete-composite-task:
      description: Deletes a task composite
      notes: |
        # Normal response
        Entities for task information, recommendations and reviews related to the specified taskId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.

        This means that a delete request of a non-existing task will return **200 Ok**.

server.port: 7000
server.error.include-message: always

spring.application.name: agenda-producer

spring.cloud.stream:
  default.contentType: application/json
  bindings:
    tasks-out-0:
      destination: agenda_consumer
      producer:
        required-groups: auditGroup

#spring.security.oauth2.resourceserver.jwt.issuer-uri: http://${app.auth-server}

resilience4j.timelimiter:
  instances:
    task:
      timeoutDuration: 2s

resilience4j.retry:
  instances:
    task:
      maxAttempts: 3
      waitDuration: 1000
      retryExceptions:
        - org.springframework.web.reactive.function.client.WebClientResponseException$InternalServerError

management.health.circuitbreakers.enabled: true

resilience4j.circuitbreaker:
  instances:
    task:
      allowHealthIndicatorToFail: false
      registerHealthIndicator: true
      slidingWindowType: COUNT_BASED
      slidingWindowSize: 5
      failureRateThreshold: 50
      waitDurationInOpenState: 10000
      permittedNumberOfCallsInHalfOpenState: 3
      automaticTransitionFromOpenToHalfOpenEnabled: true
      ignoreExceptions:
        - se.magnus.api.exceptions.InvalidInputException
        - se.magnus.api.exceptions.NotFoundException

logging:
  level:
    root: INFO
    se.magnus: DEBUG
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE
    org.apache.kafka.clients.consumer.internals.ConsumerCoordinator: WARN
    org.apache.kafka.clients.admin.AdminClientConfig: WARN
    org.apache.kafka.clients.consumer.ConsumerConfig: WARN
    org.apache.kafka.clients.producer.ProducerConfig: WARN

---
spring.config.activate.on-profile: docker

server.port: 80

---
spring.config.activate.on-profile: streaming_partitioned

spring.cloud.stream.bindings.tasks-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.recommendations-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

spring.cloud.stream.bindings.reviews-out-0.producer:
  partition-key-expression: headers['partitionKey']
  partition-count: 2

---
spring.config.activate.on-profile: prod

logging:
  level:
    root: WARN
    se.magnus: WARN
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: WARN
